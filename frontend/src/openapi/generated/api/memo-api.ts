/* tslint:disable */
/* eslint-disable */
/**
 * Cats example
 * The cats API description
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AsideDataOutput } from '../model';
// @ts-ignore
import { CateIdInput } from '../model';
// @ts-ignore
import { CateInput } from '../model';
// @ts-ignore
import { CoreOutput } from '../model';
// @ts-ignore
import { CreateCateInput } from '../model';
// @ts-ignore
import { CreateCateOutput } from '../model';
// @ts-ignore
import { CreateMemoInput } from '../model';
// @ts-ignore
import { CreateMemoOutput } from '../model';
// @ts-ignore
import { GetMemosInput } from '../model';
// @ts-ignore
import { GetMemosOutput } from '../model';
// @ts-ignore
import { GetOneMemoOutput } from '../model';
// @ts-ignore
import { ImportantMemoLengthOutput } from '../model';
// @ts-ignore
import { MemoIdInput } from '../model';
// @ts-ignore
import { UpdateMemoInput } from '../model';
/**
 * MemoApi - axios parameter creator
 * @export
 */
export const MemoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MemoIdInput} memoIdInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeImportant: async (memoIdInput: MemoIdInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memoIdInput' is not null or undefined
            assertParamExists('changeImportant', 'memoIdInput', memoIdInput)
            const localVarPath = `/memo/changeImportant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memoIdInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCateInput} createCateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: async (createCateInput: CreateCateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCateInput' is not null or undefined
            assertParamExists('createCategory', 'createCateInput', createCateInput)
            const localVarPath = `/memo/createCategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateMemoInput} createMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemo: async (createMemoInput: CreateMemoInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMemoInput' is not null or undefined
            assertParamExists('createMemo', 'createMemoInput', createMemoInput)
            const localVarPath = `/memo/createMemo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMemoInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CateIdInput} cateIdInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (cateIdInput: CateIdInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cateIdInput' is not null or undefined
            assertParamExists('deleteCategory', 'cateIdInput', cateIdInput)
            const localVarPath = `/memo/deleteCategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cateIdInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MemoIdInput} memoIdInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemo: async (memoIdInput: MemoIdInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memoIdInput' is not null or undefined
            assertParamExists('deleteMemo', 'memoIdInput', memoIdInput)
            const localVarPath = `/memo/deleteMemo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memoIdInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetMemosInput} getMemosInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (getMemosInput: GetMemosInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getMemosInput' is not null or undefined
            assertParamExists('get', 'getMemosInput', getMemosInput)
            const localVarPath = `/memo/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getMemosInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsideData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/memo/getAsideData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MemoIdInput} memoIdInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne: async (memoIdInput: MemoIdInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memoIdInput' is not null or undefined
            assertParamExists('getOne', 'memoIdInput', memoIdInput)
            const localVarPath = `/memo/getOne`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memoIdInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CateInput} cateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (cateInput: CateInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cateInput' is not null or undefined
            assertParamExists('updateCategory', 'cateInput', cateInput)
            const localVarPath = `/memo/updateOneCate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateMemoInput} updateMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemo: async (updateMemoInput: UpdateMemoInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateMemoInput' is not null or undefined
            assertParamExists('updateMemo', 'updateMemoInput', updateMemoInput)
            const localVarPath = `/memo/updateMemo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMemoInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemoApi - functional programming interface
 * @export
 */
export const MemoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MemoIdInput} memoIdInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeImportant(memoIdInput: MemoIdInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportantMemoLengthOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeImportant(memoIdInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateCateInput} createCateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategory(createCateInput: CreateCateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCateOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategory(createCateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateMemoInput} createMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMemo(createMemoInput: CreateMemoInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMemoOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMemo(createMemoInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CateIdInput} cateIdInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(cateIdInput: CateIdInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportantMemoLengthOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(cateIdInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MemoIdInput} memoIdInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMemo(memoIdInput: MemoIdInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMemo(memoIdInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetMemosInput} getMemosInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(getMemosInput: GetMemosInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMemosOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(getMemosInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAsideData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsideDataOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAsideData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MemoIdInput} memoIdInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOne(memoIdInput: MemoIdInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOneMemoOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOne(memoIdInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CateInput} cateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(cateInput: CateInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(cateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateMemoInput} updateMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemo(updateMemoInput: UpdateMemoInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemo(updateMemoInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MemoApi - factory interface
 * @export
 */
export const MemoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemoApiFp(configuration)
    return {
        /**
         * 
         * @param {MemoIdInput} memoIdInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeImportant(memoIdInput: MemoIdInput, options?: any): AxiosPromise<ImportantMemoLengthOutput> {
            return localVarFp.changeImportant(memoIdInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCateInput} createCateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(createCateInput: CreateCateInput, options?: any): AxiosPromise<CreateCateOutput> {
            return localVarFp.createCategory(createCateInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateMemoInput} createMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemo(createMemoInput: CreateMemoInput, options?: any): AxiosPromise<CreateMemoOutput> {
            return localVarFp.createMemo(createMemoInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CateIdInput} cateIdInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(cateIdInput: CateIdInput, options?: any): AxiosPromise<ImportantMemoLengthOutput> {
            return localVarFp.deleteCategory(cateIdInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MemoIdInput} memoIdInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemo(memoIdInput: MemoIdInput, options?: any): AxiosPromise<CoreOutput> {
            return localVarFp.deleteMemo(memoIdInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetMemosInput} getMemosInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(getMemosInput: GetMemosInput, options?: any): AxiosPromise<GetMemosOutput> {
            return localVarFp.get(getMemosInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsideData(options?: any): AxiosPromise<AsideDataOutput> {
            return localVarFp.getAsideData(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MemoIdInput} memoIdInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne(memoIdInput: MemoIdInput, options?: any): AxiosPromise<GetOneMemoOutput> {
            return localVarFp.getOne(memoIdInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CateInput} cateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(cateInput: CateInput, options?: any): AxiosPromise<CoreOutput> {
            return localVarFp.updateCategory(cateInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateMemoInput} updateMemoInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemo(updateMemoInput: UpdateMemoInput, options?: any): AxiosPromise<CoreOutput> {
            return localVarFp.updateMemo(updateMemoInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemoApi - object-oriented interface
 * @export
 * @class MemoApi
 * @extends {BaseAPI}
 */
export class MemoApi extends BaseAPI {
    /**
     * 
     * @param {MemoIdInput} memoIdInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public changeImportant(memoIdInput: MemoIdInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).changeImportant(memoIdInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCateInput} createCateInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public createCategory(createCateInput: CreateCateInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).createCategory(createCateInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateMemoInput} createMemoInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public createMemo(createMemoInput: CreateMemoInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).createMemo(createMemoInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CateIdInput} cateIdInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public deleteCategory(cateIdInput: CateIdInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).deleteCategory(cateIdInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MemoIdInput} memoIdInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public deleteMemo(memoIdInput: MemoIdInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).deleteMemo(memoIdInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetMemosInput} getMemosInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public get(getMemosInput: GetMemosInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).get(getMemosInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public getAsideData(options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).getAsideData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MemoIdInput} memoIdInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public getOne(memoIdInput: MemoIdInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).getOne(memoIdInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CateInput} cateInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public updateCategory(cateInput: CateInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).updateCategory(cateInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateMemoInput} updateMemoInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public updateMemo(updateMemoInput: UpdateMemoInput, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).updateMemo(updateMemoInput, options).then((request) => request(this.axios, this.basePath));
    }
}
