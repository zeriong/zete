/* tslint:disable */
/* eslint-disable */
/**
 * My API
 * An API to do awesome things
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CateIdInputDto } from '../models';
// @ts-ignore
import { CateInputDto } from '../models';
// @ts-ignore
import { CoreOutput } from '../models';
// @ts-ignore
import { CreateCateInputDto } from '../models';
// @ts-ignore
import { CreateCateOutputDto } from '../models';
// @ts-ignore
import { CreateMemoInputDto } from '../models';
// @ts-ignore
import { CreateMemoOutputDto } from '../models';
// @ts-ignore
import { ImportantMemoLengthOutputDto } from '../models';
// @ts-ignore
import { MemoIdInputDto } from '../models';
// @ts-ignore
import { PaginationInputDto } from '../models';
// @ts-ignore
import { PaginationOutputDto } from '../models';
// @ts-ignore
import { SendDefaultDataOutputDto } from '../models';
// @ts-ignore
import { UpdateManyCateInputDto } from '../models';
/**
 * MemoApi - axios parameter creator
 * @export
 */
export const MemoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MemoIdInputDto} memoIdInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeImportant: async (memoIdInputDto: MemoIdInputDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memoIdInputDto' is not null or undefined
            assertParamExists('changeImportant', 'memoIdInputDto', memoIdInputDto)
            const localVarPath = `/memo/changeImportant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memoIdInputDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCateInputDto} createCateInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCate: async (createCateInputDto: CreateCateInputDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCateInputDto' is not null or undefined
            assertParamExists('createCate', 'createCateInputDto', createCateInputDto)
            const localVarPath = `/memo/createCate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCateInputDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateMemoInputDto} createMemoInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemo: async (createMemoInputDto: CreateMemoInputDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMemoInputDto' is not null or undefined
            assertParamExists('createMemo', 'createMemoInputDto', createMemoInputDto)
            const localVarPath = `/memo/createMemo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMemoInputDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CateIdInputDto} cateIdInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCate: async (cateIdInputDto: CateIdInputDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cateIdInputDto' is not null or undefined
            assertParamExists('deleteCate', 'cateIdInputDto', cateIdInputDto)
            const localVarPath = `/memo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cateIdInputDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PaginationInputDto} paginationInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrollPagination: async (paginationInputDto: PaginationInputDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paginationInputDto' is not null or undefined
            assertParamExists('scrollPagination', 'paginationInputDto', paginationInputDto)
            const localVarPath = `/memo/scrollPagination`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paginationInputDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDefaultData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/memo/sendContentData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateManyCateInputDto} updateManyCateInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManyCate: async (updateManyCateInputDto: UpdateManyCateInputDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateManyCateInputDto' is not null or undefined
            assertParamExists('updateManyCate', 'updateManyCateInputDto', updateManyCateInputDto)
            const localVarPath = `/memo/updateManyCate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateManyCateInputDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CateInputDto} cateInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneCate: async (cateInputDto: CateInputDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cateInputDto' is not null or undefined
            assertParamExists('updateOneCate', 'cateInputDto', cateInputDto)
            const localVarPath = `/memo/updateOneCate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cateInputDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemoApi - functional programming interface
 * @export
 */
export const MemoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MemoIdInputDto} memoIdInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeImportant(memoIdInputDto: MemoIdInputDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportantMemoLengthOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeImportant(memoIdInputDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateCateInputDto} createCateInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCate(createCateInputDto: CreateCateInputDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCateOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCate(createCateInputDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateMemoInputDto} createMemoInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMemo(createMemoInputDto: CreateMemoInputDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMemoOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMemo(createMemoInputDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CateIdInputDto} cateIdInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCate(cateIdInputDto: CateIdInputDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportantMemoLengthOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCate(cateIdInputDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PaginationInputDto} paginationInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scrollPagination(paginationInputDto: PaginationInputDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginationOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scrollPagination(paginationInputDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendDefaultData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendDefaultDataOutputDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendDefaultData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateManyCateInputDto} updateManyCateInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateManyCate(updateManyCateInputDto: UpdateManyCateInputDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateManyCate(updateManyCateInputDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CateInputDto} cateInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOneCate(cateInputDto: CateInputDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneCate(cateInputDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MemoApi - factory interface
 * @export
 */
export const MemoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemoApiFp(configuration)
    return {
        /**
         * 
         * @param {MemoIdInputDto} memoIdInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeImportant(memoIdInputDto: MemoIdInputDto, options?: any): AxiosPromise<ImportantMemoLengthOutputDto> {
            return localVarFp.changeImportant(memoIdInputDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCateInputDto} createCateInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCate(createCateInputDto: CreateCateInputDto, options?: any): AxiosPromise<CreateCateOutputDto> {
            return localVarFp.createCate(createCateInputDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateMemoInputDto} createMemoInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemo(createMemoInputDto: CreateMemoInputDto, options?: any): AxiosPromise<CreateMemoOutputDto> {
            return localVarFp.createMemo(createMemoInputDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CateIdInputDto} cateIdInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCate(cateIdInputDto: CateIdInputDto, options?: any): AxiosPromise<ImportantMemoLengthOutputDto> {
            return localVarFp.deleteCate(cateIdInputDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PaginationInputDto} paginationInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrollPagination(paginationInputDto: PaginationInputDto, options?: any): AxiosPromise<PaginationOutputDto> {
            return localVarFp.scrollPagination(paginationInputDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDefaultData(options?: any): AxiosPromise<SendDefaultDataOutputDto> {
            return localVarFp.sendDefaultData(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateManyCateInputDto} updateManyCateInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManyCate(updateManyCateInputDto: UpdateManyCateInputDto, options?: any): AxiosPromise<CoreOutput> {
            return localVarFp.updateManyCate(updateManyCateInputDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CateInputDto} cateInputDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneCate(cateInputDto: CateInputDto, options?: any): AxiosPromise<CoreOutput> {
            return localVarFp.updateOneCate(cateInputDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemoApi - object-oriented interface
 * @export
 * @class MemoApi
 * @extends {BaseAPI}
 */
export class MemoApi extends BaseAPI {
    /**
     * 
     * @param {MemoIdInputDto} memoIdInputDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public changeImportant(memoIdInputDto: MemoIdInputDto, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).changeImportant(memoIdInputDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCateInputDto} createCateInputDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public createCate(createCateInputDto: CreateCateInputDto, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).createCate(createCateInputDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateMemoInputDto} createMemoInputDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public createMemo(createMemoInputDto: CreateMemoInputDto, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).createMemo(createMemoInputDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CateIdInputDto} cateIdInputDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public deleteCate(cateIdInputDto: CateIdInputDto, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).deleteCate(cateIdInputDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PaginationInputDto} paginationInputDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public scrollPagination(paginationInputDto: PaginationInputDto, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).scrollPagination(paginationInputDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public sendDefaultData(options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).sendDefaultData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateManyCateInputDto} updateManyCateInputDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public updateManyCate(updateManyCateInputDto: UpdateManyCateInputDto, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).updateManyCate(updateManyCateInputDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CateInputDto} cateInputDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoApi
     */
    public updateOneCate(cateInputDto: CateInputDto, options?: AxiosRequestConfig) {
        return MemoApiFp(this.configuration).updateOneCate(cateInputDto, options).then((request) => request(this.axios, this.basePath));
    }
}
